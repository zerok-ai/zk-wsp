name: client-prod
on:
  push:
    tags: #r/<ENVIRONMENT>/<DOCKER-TAG-OR-VERSION>
      - 'prod/**'
  workflow_dispatch:
    inputs:
      DOCKER_TAG:
        description: 'Docker Image Tag'
        required: true
        default: 'latest'
      ENV:
        description: 'ENV'
        required: true
        default: 'prod'
env:
  ENV: ${{ github.event.inputs.ENV }}
  DOCKER_TAG: ${{ github.event.inputs.DOCKER_TAG }}
  GOOS: ${{ vars.GOOS }}
  GOARCH: ${{ vars.GOARCH }}
  CGO_ENABLED: ${{ vars.CGO_ENABLED }}
  GKE_SA_KEY: ${{ secrets.GKE_SA_KEY }}
  DOCKER_REG: ${{ vars.DOCKER_REG }}
  PROJECT_ID: ${{ vars.PROJECT_ID }}
  DOCKER_REPO: ${{ vars.DOCKER_REPO }}
  APP_NAME: ${{ vars.APP_NAME }}
  GOPRIVATE: ${{ vars.GOPRIVATE }}
  TOKEN: ${{ secrets.GITPAT }}

jobs:
  init:
    runs-on: zk-self-hosted
    outputs:
      ENVIRONMENT: ${{ steps.extractEnvAndVersion.outputs.TAG_ENV }}
      VERSION: ${{ steps.extractEnvAndVersion.outputs.TAG_VERSION }}
    steps:
      - name: Set tag envt var
        run: |
          echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> "$GITHUB_ENV"

      - name: Extract env and version
        id: extractEnvAndVersion
        run: |
          if [ "$DOCKER_TAG" == "" ]; then
            part1=$(echo "$GIT_TAG" | cut -d'/' -f2)
            echo "TAG_VERSION=$part1" >> $GITHUB_OUTPUT
            echo "TAG_ENV=prod" >> $GITHUB_OUTPUT
          else
            echo "TAG_VERSION=$DOCKER_TAG" >> $GITHUB_OUTPUT
            echo "TAG_ENV=$ENV" >> $GITHUB_OUTPUT
          fi

      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"

  build-push:
    uses: zerok-ai/zk-wsp/.github/workflows/zk-client-build-push.yml@helm-push
    with:
      VERSION: ${{ needs.init.outputs.VERSION }}
      ENVIRONMENT: ${{ needs.init.outputs.ENVIRONMENT }}
      DOCKER_IDENTIFIER: ${{ needs.init.outputs.ENVIRONMENT }}
    secrets:
      GKE_SA_KEY: ${{ secrets.GKE_SA_KEY }}
    needs: init

  helm-push:
    uses: zerok-ai/zk-wsp/.github/workflows/zk-client-helm-publish.yml@helm-push
    with:
      HELM_VERSION: ${{ needs.init.outputs.VERSION }}
      ENVIRONMENT: ${{ needs.init.outputs.ENVIRONMENT }}
      DOCKER_IDENTIFIER: ${{ needs.init.outputs.ENVIRONMENT }}
    secrets:
      AWS_ACCESS_ID: ${{ secrets.AWS_ACCESS_ID }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
    needs: [ init,build-push ]
